<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- #10.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="10485760" /> <!-- max 파일용량은 10MB이다. -->
	</beans:bean>

	<context:component-scan base-package="com.kh.ok" />

	<!-- #12.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	<!--  net.sf.json.spring.web.servlet.view.JsonView 응답객체에 json객체를 쓰는 애  json으로 옮기는 작업을 이게 해줌.-->
	
	<!-- 스프링 컨테이너에 bean객체 등록.
	bean으로 등록되지 않은 클래스는 사용할 수 없다.
	지정한 패키지의 모든 *.java파일이 스프링 컨테이너에 의해 스캔되어 자동으로 bean으로 등록됨.
	지정한 패키지를 포함해 하위의 모든 @Componnent 클래스를 등록함.
	bean의 이름은 자동으로 소문자로 시작하는 클래스명임. -->
	
	<!-- #13.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter -->
	<beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!--  13.1은 생략가능. 스프링 3.1이상에서는 annotaion-driven이 위 처리를 다 해주기 때문에  생략해도 상관없다-->


	<!-- #10.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<!-- <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="10485760" /> max 파일용량은 10MB이다.
	</beans:bean>
 -->
	<!-- <interceptors>
		<interceptor>
			<mapping path="/**"/>
			
			<exclude-mapping path="/member/memberEnroll*"/>
			<exclude-mapping path="/member/memberLogin*"/>
			<exclude-mapping path="/member/checkIdDuplicate.do"/>
			<exclude-mapping path="/resources/**"/>
			<beans:bean id="loginCheckIntercepter" class="com.kh.ok.common.intercepter.LoginCheckIntercepter"/>
		</interceptor>
	</interceptors> -->
</beans:beans>
